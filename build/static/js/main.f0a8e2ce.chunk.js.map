{"version":3,"sources":["Login.js","Register.js","serviceWorker.js","index.js"],"names":["Login","className","id","href","htmlFor","type","Register","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAwCeA,MApCf,WACE,OACE,yBAAKC,UAAU,mBACb,yBAAKC,GAAG,aAAaD,UAAU,8BAC3B,yBAAKA,UAAU,iDACb,yBAAKC,GAAG,qBAAqBD,UAAU,yCACnC,uBAAGE,KAAK,YAAYF,UAAU,yBAA9B,iBAEA,wBAAIA,UAAU,QAAd,wBAEA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cACf,2BAAOG,QAAQ,qBAAqBH,UAAU,iBAA9C,6BACA,2BAAOI,KAAK,QAAQJ,UAAU,kCAAkCC,GAAG,gBACnE,2BAAOA,GAAG,YAAYD,UAAU,kCAGlC,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cACf,2BAAOG,QAAQ,qBAAqBH,UAAU,4BAA9C,YADA,IAC0F,uBAAGE,KAAK,KAAKF,UAAU,qBAAvB,oBAC1F,2BAAOI,KAAK,WAAWJ,UAAU,kCAAkCC,GAAG,gBACtE,2BAAOA,GAAG,YAAYD,UAAU,kCAGlC,yBAAKA,UAAU,eACb,4BAAQA,UAAU,kCAAlB,iBCyBLK,MAnDf,WACE,OACE,yBAAKL,UAAU,mBACb,yBAAKC,GAAG,aAAaD,UAAU,8BAC3B,yBAAKA,UAAU,kDACb,yBAAKC,GAAG,qBAAqBD,UAAU,yCAEnC,uBAAGE,KAAK,IAAIF,UAAU,yBAAtB,SAEA,wBAAIA,UAAU,QAAd,YAEA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACf,2BAAOG,QAAQ,qBAAqBH,UAAU,iBAA9C,cACA,2BAAOI,KAAK,QAAQJ,UAAU,kCAAkCC,GAAG,gBACnE,2BAAOA,GAAG,YAAYD,UAAU,kCAGlC,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACf,2BAAOG,QAAQ,qBAAqBH,UAAU,4BAA9C,aACA,2BAAOI,KAAK,WAAWJ,UAAU,kCAAkCC,GAAG,gBACtE,2BAAOA,GAAG,YAAYD,UAAU,kCAGlC,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cACf,2BAAOG,QAAQ,qBAAqBH,UAAU,4BAA9C,iBACA,2BAAOI,KAAK,WAAWJ,UAAU,kCAAkCC,GAAG,gBACtE,2BAAOA,GAAG,YAAYD,UAAU,kCAGlC,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cACf,2BAAOG,QAAQ,qBAAqBH,UAAU,4BAA9C,eACA,2BAAOI,KAAK,WAAWJ,UAAU,kCAAkCC,GAAG,gBACtE,2BAAOA,GAAG,YAAYD,UAAU,kCAGlC,yBAAKA,UAAU,eACb,4BAAQA,UAAU,kCAAlB,mB,eCjCAM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,kBAAC,IAAD,CAAOe,KAAK,YAAYC,UAAWV,MAG1CW,SAASC,eAAe,SDoHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f0a8e2ce.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nfunction Login() {\n  return (\n    <div className=\"container-fluid\">\n      <div id=\"login-body\" className=\"row justify-content-center\">\n          <div className=\"col-1 col-sm-2 col-md-5 col-xl-4 pos-relative\">\n            <div id=\"gg-login-container\" className=\"card rounded-0 border-0 shadow-sm p-3\">\n                <a href=\"/register\" className=\"small text-right mb-5\">Register here</a>\n\n                <h3 className=\"mb-5\">GabayGuro Bingo 2020</h3>\n\n                <div className=\"row\">\n                  <div className=\"col-12\">\n                    <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputEmail1\" className=\"small gg-text\">Username or Email address</label>\n                    <input type=\"email\" className=\"form-control custorm-form-login\" id=\"gg-username\" />\n                    <small id=\"emailHelp\" className=\"form-text text-muted d-none\"></small>\n                    </div>\n                  </div>\n                  <div className=\"col-12\">\n                    <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputEmail1\" className=\"small gg-text float-left\">Password</label> <a href=\"#!\" className=\"small float-right\">Forgot password?</a>\n                    <input type=\"password\" className=\"form-control custorm-form-login\" id=\"gg-password\" />\n                    <small id=\"emailHelp\" className=\"form-text text-muted d-none\"></small>\n                    </div>\n                  </div>\n                  <div className=\"col-12 mt-2\">\n                    <button className=\"btn gg-bg text-white btn-block\">Log in</button>\n                  </div>\n                </div>\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nfunction Register() {\n  return (\n    <div className=\"container-fluid\">\n      <div id=\"login-body\" className=\"row justify-content-center\">\n          <div className=\"col-10 col-sm-8 col-md-5 col-xl-4 pos-relative\">\n            <div id=\"gg-login-container\" className=\"card rounded-0 border-0 shadow-sm p-3\">\n\n                <a href=\"/\" className=\"small text-right mb-5\">Login</a>\n\n                <h3 className=\"mb-5\">Register</h3>\n\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputEmail1\" className=\"small gg-text\">First name</label>\n                    <input type=\"email\" className=\"form-control custorm-form-login\" id=\"gg-username\" />\n                    <small id=\"emailHelp\" className=\"form-text text-muted d-none\"></small>\n                    </div>\n                  </div>\n                  <div className=\"col\">\n                    <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputEmail1\" className=\"small gg-text float-left\">Last name</label>\n                    <input type=\"password\" className=\"form-control custorm-form-login\" id=\"gg-password\" />\n                    <small id=\"emailHelp\" className=\"form-text text-muted d-none\"></small>\n                    </div>\n                  </div>\n                  <div className=\"col-12\">\n                    <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputEmail1\" className=\"small gg-text float-left\">Email address</label>\n                    <input type=\"password\" className=\"form-control custorm-form-login\" id=\"gg-password\" />\n                    <small id=\"emailHelp\" className=\"form-text text-muted d-none\"></small>\n                    </div>\n                  </div>\n                  <div className=\"col-12\">\n                    <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputEmail1\" className=\"small gg-text float-left\">Contact no.</label>\n                    <input type=\"password\" className=\"form-control custorm-form-login\" id=\"gg-password\" />\n                    <small id=\"emailHelp\" className=\"form-text text-muted d-none\"></small>\n                    </div>\n                  </div>\n                  <div className=\"col-12 mt-2\">\n                    <button className=\"btn gg-bg text-white btn-block\">Register</button>\n                  </div>\n                </div>\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Register;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Login from './Login';\nimport Register from './Register';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n  <BrowserRouter>\n      <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n      </Switch>\n  </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}