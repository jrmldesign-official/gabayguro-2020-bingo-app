{"ast":null,"code":"'use strict';\n\nvar BINGO = BINGO || {};\nBINGO.ballCount;\nBINGO.ballsArr = [];\nBINGO.cardCells = document.getElementsByClassName('js-card-cell');\nBINGO.domElems = {\n  drawButton: document.getElementById('js-draw'),\n  resetButton: document.getElementById('js-reset'),\n  cardButton: document.getElementById('js-card'),\n  drawHistory: document.getElementById('js-history'),\n  drawnLast: document.getElementById('js-last-num')\n};\n/******************************************************************************\n * POPULATE BALLS\n * Populates ballsArr[] with 75 balls ranging from B-1 to O-75.\n *****************************************************************************/\n\nBINGO.populateBallsArray = () => {\n  for (let i = BINGO.ballCount; i >= 1; i--) {\n    if (i >= 1 && i <= 15) BINGO.ballsArr.push('B-' + i);\n    if (i >= 16 && i <= 30) BINGO.ballsArr.push('I-' + i);\n    if (i >= 31 && i <= 45) BINGO.ballsArr.push('N-' + i);\n    if (i >= 46 && i <= 60) BINGO.ballsArr.push('G-' + i);\n    if (i >= 61 && i <= 75) BINGO.ballsArr.push('O-' + i);\n  }\n};\n/******************************************************************************\n * ADD CLASS ON CLICK\n * Receives an HTMLCollection and a CSS class. Adds a click handler that\n * toggles the passed class on the clicked el.\n * @param {Object} obj - HTMLCollection\n * @param {String} cl  - CSS class\n *****************************************************************************/\n\n\nBINGO.addClassOnClick = (obj, cl) => {\n  [...obj].map(el => {\n    el.addEventListener('click', () => {\n      el.classList.contains(cl) ? el.classList.remove(cl) : el.classList.add(cl);\n    });\n  });\n};\n/******************************************************************************\n * INITIALIZER ( IIFE )\n * Kicks things off.\n *****************************************************************************/\n\n\n(BINGO.init = () => {\n  BINGO.ballCount = 75;\n  BINGO.populateBallsArray();\n  BINGO.addClassOnClick(BINGO.cardCells, 'marked');\n})();\n/******************************************************************************\n * IS VALID NUMBER\n * Validation check. See if a passed number already exists in an array.\n * @param  {Int}   num - number to check against the array\n * @param  {Array} arr - existing numbers\n * @return {Bool}\n *****************************************************************************/\n\nBINGO.isValidNumber = (num, arr = []) => {\n  if (!arr.includes(num)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n/******************************************************************************\n * RANDOM NUMBER GENERATOR\n * Generates and returns a random number between and including a min/max range\n * (passed as parameters). Minimum and maximum inclusive.\n * @param  {int}   max - maximum value\n * @param  {int}   min - minimum value\n * @param  {Array} arr - for validation check\n * @return {Int} randomized number from min to max inclusive\n *****************************************************************************/\n\n\nBINGO.generateRandomNumber = (max, min = 0, arr = []) => {\n  const _max = Math.floor(max);\n\n  const _min = Math.ceil(min);\n\n  const _arr = arr; // random number between and including range\n\n  const _num = Math.floor(Math.random() * (_max - _min + 1)) + _min; // Make sure random number doesn't already exist in the array\n\n\n  if (BINGO.isValidNumber(_num, _arr)) {\n    _arr.push(_num);\n\n    return _num;\n  } else {\n    // recursive call if invalid\n    return BINGO.generateRandomNumber(_max, _min, _arr);\n  }\n};\n/******************************************************************************\n * RANDOM BALL SELECTOR\n * Randomly selects and returns a ball from ballsArr[].\n * @return {String} randomized ball number from B-1 to O-75\n *****************************************************************************/\n\n\nBINGO.randomBallSelector = () => {\n  const _ballCount = BINGO.ballsArr.length;\n\n  const _randomBall = BINGO.generateRandomNumber(_ballCount - 1);\n\n  return BINGO.ballsArr[_randomBall];\n};\n/******************************************************************************\n * POP BALL\n * Receives a randomized ball number and removes it from ballsArr[].\n * @param  {String} ball  - randomized ball number from B-1 to O-75\n * @return {Object} BINGO - makes method chaining possible\n *****************************************************************************/\n\n\nBINGO.popBall = ball => {\n  const _ballIndex = BINGO.ballsArr.indexOf(ball);\n\n  if (_ballIndex > -1) BINGO.ballsArr.splice(_ballIndex, 1);\n  return BINGO;\n};\n/******************************************************************************\n * UPDATE DRAW HISTORY\n * Receives a randomized ball number. Creates an 'li' that contains the\n * randomized ball number and appends it to the draw history in the DOM.\n * Also scrolls to the bottom of the list when a new ball is drawn.\n * @param  {String} ball  - randomized ball number from B-1 to O-75\n * @return {Object} BINGO - makes method chaining possible\n *****************************************************************************/\n\n\nBINGO.updateDrawHistory = ball => {\n  const _node = document.createElement('li');\n\n  const _textnode = document.createTextNode(ball); // append ball number to 'li'\n\n\n  _node.appendChild(_textnode); // update the DOM\n\n\n  BINGO.domElems.drawHistory.appendChild(_node); // scroll to the bottom of the list in the DOM\n\n  BINGO.domElems.drawHistory.scrollTop = BINGO.domElems.drawHistory.scrollHeight;\n  return BINGO;\n};\n/******************************************************************************\n * UPDATE LAST DRAWN\n * Receives a randomized ball number and updates the last drawn number in the\n * DOM.\n * @param  {String} ball  - randomized ball number from B-1 to O-75\n * @return {Object} BINGO - makes method chaining possible\n *****************************************************************************/\n\n\nBINGO.updateLastDrawn = ball => {\n  BINGO.domElems.drawnLast.innerHTML = ball;\n  return BINGO;\n};\n/******************************************************************************\n * HIGHLIGHT DRAWN BALLS\n * Receives a randomized ball number and highlights the corresponding value\n * in the DOM table.\n * @param  {String} ball  - randomized ball number from B-1 to O-75\n * @return {Object} BINGO - makes method chaining possible\n *****************************************************************************/\n\n\nBINGO.highlightDrawnBall = ball => {\n  // last ball drawn\n  const _drawnBalls = document.getElementsByClassName('last');\n\n  for (let i = _drawnBalls.length - 1; i >= 0; i--) {\n    // remove special highlighting\n    _drawnBalls[i].classList.remove('last');\n  } // highlight the drawn ball in the bingo caller table\n\n\n  document.getElementById('js-caller-' + ball).classList.add('drawn', 'last');\n  return BINGO;\n};\n/******************************************************************************\n * HIGHLIGHT CARD CELL\n * Receives a ball number then finds and highlights the corresponding cell in\n * the playing card.\n * @param  {Int}    number - Between 1 - 75\n * @return {Object} BINGO  - makes method chaining possible\n *****************************************************************************/\n\n\nBINGO.highlightCardCell = number => {\n  let _cell = document.getElementById('js-card-' + number);\n\n  if (!!_cell) _cell.classList.add('marked');\n  return BINGO;\n};\n/******************************************************************************\n * RESET GAME\n * Clear all game data, draw history, and ball highlighting.\n * Hide the reset button.\n * Re-enable and set focus on the draw button.\n * Re-initialize the game.\n *****************************************************************************/\n\n\nBINGO.resetGame = () => {\n  const _tds = document.getElementsByClassName('drawn'); // reset global vars\n\n\n  BINGO.ballsArr = [];\n  BINGO.domElems.drawnLast.innerHTML = 'Click to Draw';\n  BINGO.domElems.drawHistory.innerHTML = ''; // reset all the CSS styles for the drawn balls\n\n  for (let i = _tds.length - 1; i >= 0; i--) {\n    _tds[i].classList.remove('drawn', 'last');\n  } // hide the rest button\n\n\n  BINGO.domElems.resetButton.classList.add('display-none'); // re-enable draw button\n\n  BINGO.domElems.drawButton.disabled = false;\n  BINGO.domElems.drawButton.classList.remove('disabled'); // set focus on the draw button\n\n  BINGO.domElems.drawButton.focus(); // re-initialize\n\n  BINGO.init();\n};\n/******************************************************************************\n * POPULATE CARD\n * Clears and populates the playing card with random numbers.\n *****************************************************************************/\n\n\nBINGO.populateCard = () => {\n  let _cardNumsArr = [];\n\n  for (let i = BINGO.cardCells.length - 1; i >= 0; i--) {\n    let _randomNumber = BINGO.generateRandomNumber(BINGO.cardCells[i].dataset.max, BINGO.cardCells[i].dataset.min, _cardNumsArr);\n\n    BINGO.cardCells[i].classList.remove('marked');\n    BINGO.cardCells[i].innerHTML = _randomNumber;\n    BINGO.cardCells[i].id = 'js-card-' + _randomNumber;\n  }\n\n  BINGO.cardCells[0].className = 'js-card-cell B1';\n  BINGO.cardCells[1].className = 'js-card-cell I1';\n  BINGO.cardCells[2].className = 'js-card-cell N1';\n  BINGO.cardCells[3].className = 'js-card-cell G1';\n  BINGO.cardCells[4].className = 'js-card-cell O1';\n  BINGO.cardCells[5].className = 'js-card-cell B2';\n  BINGO.cardCells[6].className = 'js-card-cell I2';\n  BINGO.cardCells[7].className = 'js-card-cell N2';\n  BINGO.cardCells[8].className = 'js-card-cell G2';\n  BINGO.cardCells[9].className = 'js-card-cell O2';\n  BINGO.cardCells[10].className = 'js-card-cell B3';\n  BINGO.cardCells[11].className = 'js-card-cell I3';\n  BINGO.cardCells[12].innerHTML = 'FREE';\n  BINGO.cardCells[12].className = 'js-card-cell N3 marked';\n  BINGO.cardCells[12].removeAttribute(\"id\");\n  BINGO.cardCells[13].className = 'js-card-cell G3';\n  BINGO.cardCells[14].className = 'js-card-cell O3';\n  BINGO.cardCells[15].className = 'js-card-cell B4';\n  BINGO.cardCells[16].className = 'js-card-cell I4';\n  BINGO.cardCells[17].className = 'js-card-cell N4';\n  BINGO.cardCells[18].className = 'js-card-cell G4';\n  BINGO.cardCells[19].className = 'js-card-cell O4';\n  BINGO.cardCells[20].className = 'js-card-cell B5';\n  BINGO.cardCells[21].className = 'js-card-cell I5';\n  BINGO.cardCells[22].className = 'js-card-cell N5';\n  BINGO.cardCells[23].className = 'js-card-cell G5';\n  BINGO.cardCells[24].className = 'js-card-cell O5';\n};\n\nBINGO.isFourCorners = function (radio) {\n  let _value = radio.value;\n  console.log(_value);\n};\n/******************************************************************************\n * DRAW BALL\n * Do all the things:\n *     - draw a random ball\n *     - pop it from ballsArr[]\n *     - update the DOM (text and highlighting)\n *     - decrement the ball count\n *     - disable draw button\n *     - show reset button\n *****************************************************************************/\n\n\nBINGO.drawBall = () => {\n  const _ball = BINGO.randomBallSelector();\n\n  const _drawnNumber = parseInt(_ball.split('-')[1]);\n\n  if (BINGO.ballCount > 0) {\n    BINGO.popBall(_ball).updateDrawHistory(_ball).updateLastDrawn(_ball).highlightDrawnBall(_ball).highlightCardCell(_drawnNumber);\n    BINGO.ballCount--;\n\n    if (BINGO.ballCount === 0) {\n      // disable draw button\n      BINGO.domElems.drawButton.disabled = true;\n      BINGO.domElems.drawButton.classList.add('disabled'); // show the reset button\n\n      BINGO.domElems.resetButton.classList.remove('display-none');\n    }\n  }\n}; // BINGO.domElems.drawButton.addEventListener( 'click', BINGO.drawBall );\n// BINGO.domElems.resetButton.addEventListener( 'click', BINGO.resetGame );\n\n\nBINGO.domElems.cardButton.addEventListener('click', BINGO.populateCard);","map":{"version":3,"sources":["/Users/johnflex/Desktop/PUBLIC_HTML/Practice/bingo-app/src/components/Player/action.js"],"names":["BINGO","ballCount","ballsArr","cardCells","document","getElementsByClassName","domElems","drawButton","getElementById","resetButton","cardButton","drawHistory","drawnLast","populateBallsArray","i","push","addClassOnClick","obj","cl","map","el","addEventListener","classList","contains","remove","add","init","isValidNumber","num","arr","includes","generateRandomNumber","max","min","_max","Math","floor","_min","ceil","_arr","_num","random","randomBallSelector","_ballCount","length","_randomBall","popBall","ball","_ballIndex","indexOf","splice","updateDrawHistory","_node","createElement","_textnode","createTextNode","appendChild","scrollTop","scrollHeight","updateLastDrawn","innerHTML","highlightDrawnBall","_drawnBalls","highlightCardCell","number","_cell","resetGame","_tds","disabled","focus","populateCard","_cardNumsArr","_randomNumber","dataset","id","className","removeAttribute","isFourCorners","radio","_value","value","console","log","drawBall","_ball","_drawnNumber","parseInt","split"],"mappings":"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","sourcesContent":["'use strict';\n\nvar BINGO = BINGO || {};\n\nBINGO.ballCount;\nBINGO.ballsArr  = [];\nBINGO.cardCells = document.getElementsByClassName( 'js-card-cell' );\nBINGO.domElems  = {\n    drawButton  : document.getElementById( 'js-draw' ),\n    resetButton : document.getElementById( 'js-reset' ),\n    cardButton  : document.getElementById( 'js-card' ),\n    drawHistory : document.getElementById( 'js-history' ),\n    drawnLast   : document.getElementById( 'js-last-num' )\n};\n\n/******************************************************************************\n * POPULATE BALLS\n * Populates ballsArr[] with 75 balls ranging from B-1 to O-75.\n *****************************************************************************/\nBINGO.populateBallsArray = () => {\n\n    for ( let i = BINGO.ballCount; i >= 1; i-- ) {\n\n        if ( i >= 1  && i <= 15 ) BINGO.ballsArr.push( 'B-' + i );\n        if ( i >= 16 && i <= 30 ) BINGO.ballsArr.push( 'I-' + i );\n        if ( i >= 31 && i <= 45 ) BINGO.ballsArr.push( 'N-' + i );\n        if ( i >= 46 && i <= 60 ) BINGO.ballsArr.push( 'G-' + i );\n        if ( i >= 61 && i <= 75 ) BINGO.ballsArr.push( 'O-' + i );\n\n    }\n\n};\n\n/******************************************************************************\n * ADD CLASS ON CLICK\n * Receives an HTMLCollection and a CSS class. Adds a click handler that\n * toggles the passed class on the clicked el.\n * @param {Object} obj - HTMLCollection\n * @param {String} cl  - CSS class\n *****************************************************************************/\nBINGO.addClassOnClick = ( obj, cl ) => {\n\n    [ ...obj ].map( el => {\n\n        el.addEventListener( 'click', () => {\n\n            el.classList.contains( cl ) ? el.classList.remove( cl ) : el.classList.add( cl );\n\n        } );\n\n    });\n\n};\n\n/******************************************************************************\n * INITIALIZER ( IIFE )\n * Kicks things off.\n *****************************************************************************/\n(BINGO.init = () => {\n\n    BINGO.ballCount = 75;\n\n    BINGO.populateBallsArray();\n    BINGO.addClassOnClick( BINGO.cardCells, 'marked' );\n\n})();\n\n/******************************************************************************\n * IS VALID NUMBER\n * Validation check. See if a passed number already exists in an array.\n * @param  {Int}   num - number to check against the array\n * @param  {Array} arr - existing numbers\n * @return {Bool}\n *****************************************************************************/\nBINGO.isValidNumber = ( num, arr = [] ) => {\n\n    if ( !arr.includes( num ) ) {\n\n        return true;\n\n    } else {\n\n        return false;\n\n    }\n\n};\n\n/******************************************************************************\n * RANDOM NUMBER GENERATOR\n * Generates and returns a random number between and including a min/max range\n * (passed as parameters). Minimum and maximum inclusive.\n * @param  {int}   max - maximum value\n * @param  {int}   min - minimum value\n * @param  {Array} arr - for validation check\n * @return {Int} randomized number from min to max inclusive\n *****************************************************************************/\nBINGO.generateRandomNumber = ( max, min = 0, arr = [] ) => {\n\n    const _max = Math.floor( max );\n    const _min = Math.ceil( min );\n    const _arr = arr;\n    // random number between and including range\n    const _num = Math.floor( Math.random() * ( _max - _min + 1 ) ) + _min;\n\n    // Make sure random number doesn't already exist in the array\n    if ( BINGO.isValidNumber( _num, _arr ) ) {\n\n        _arr.push( _num );\n\n        return _num;\n\n    } else {\n\n        // recursive call if invalid\n        return BINGO.generateRandomNumber( _max, _min, _arr );\n\n    }\n    \n\n};\n\n/******************************************************************************\n * RANDOM BALL SELECTOR\n * Randomly selects and returns a ball from ballsArr[].\n * @return {String} randomized ball number from B-1 to O-75\n *****************************************************************************/\nBINGO.randomBallSelector = () => {\n\n    const _ballCount  = BINGO.ballsArr.length;\n    const _randomBall = BINGO.generateRandomNumber( _ballCount - 1 );\n\n    return BINGO.ballsArr[ _randomBall ];\n\n};\n\n/******************************************************************************\n * POP BALL\n * Receives a randomized ball number and removes it from ballsArr[].\n * @param  {String} ball  - randomized ball number from B-1 to O-75\n * @return {Object} BINGO - makes method chaining possible\n *****************************************************************************/\nBINGO.popBall = ball => {\n\n    const _ballIndex = BINGO.ballsArr.indexOf( ball );\n\n    if ( _ballIndex > -1 ) BINGO.ballsArr.splice( _ballIndex, 1 );\n\n    return BINGO;\n\n};\n\n/******************************************************************************\n * UPDATE DRAW HISTORY\n * Receives a randomized ball number. Creates an 'li' that contains the\n * randomized ball number and appends it to the draw history in the DOM.\n * Also scrolls to the bottom of the list when a new ball is drawn.\n * @param  {String} ball  - randomized ball number from B-1 to O-75\n * @return {Object} BINGO - makes method chaining possible\n *****************************************************************************/\nBINGO.updateDrawHistory = ball => {\n\n    const _node     = document.createElement( 'li' );\n    const _textnode = document.createTextNode( ball );\n\n    // append ball number to 'li'\n    _node.appendChild( _textnode );\n\n    // update the DOM\n    BINGO.domElems.drawHistory.appendChild( _node );\n\n    // scroll to the bottom of the list in the DOM\n    BINGO.domElems.drawHistory.scrollTop = BINGO.domElems.drawHistory.scrollHeight;\n\n    return BINGO;\n\n};\n\n/******************************************************************************\n * UPDATE LAST DRAWN\n * Receives a randomized ball number and updates the last drawn number in the\n * DOM.\n * @param  {String} ball  - randomized ball number from B-1 to O-75\n * @return {Object} BINGO - makes method chaining possible\n *****************************************************************************/\nBINGO.updateLastDrawn = ball => {\n\n    BINGO.domElems.drawnLast.innerHTML = ball;\n\n    return BINGO;\n\n};\n\n/******************************************************************************\n * HIGHLIGHT DRAWN BALLS\n * Receives a randomized ball number and highlights the corresponding value\n * in the DOM table.\n * @param  {String} ball  - randomized ball number from B-1 to O-75\n * @return {Object} BINGO - makes method chaining possible\n *****************************************************************************/\nBINGO.highlightDrawnBall = ball => {\n\n    // last ball drawn\n    const _drawnBalls = document.getElementsByClassName( 'last' );\n\n    for ( let i = _drawnBalls.length - 1; i >= 0; i-- ) {\n\n        // remove special highlighting\n        _drawnBalls[ i ].classList.remove( 'last' );\n\n    }\n\n    // highlight the drawn ball in the bingo caller table\n    document.getElementById( 'js-caller-' + ball ).classList.add( 'drawn', 'last' );\n\n    return BINGO;\n\n};\n\n/******************************************************************************\n * HIGHLIGHT CARD CELL\n * Receives a ball number then finds and highlights the corresponding cell in\n * the playing card.\n * @param  {Int}    number - Between 1 - 75\n * @return {Object} BINGO  - makes method chaining possible\n *****************************************************************************/\nBINGO.highlightCardCell = number => {\n\n    let _cell = document.getElementById( 'js-card-' + number );\n\n    if ( !!_cell ) _cell.classList.add( 'marked' );\n\n    return BINGO;\n\n};\n\n/******************************************************************************\n * RESET GAME\n * Clear all game data, draw history, and ball highlighting.\n * Hide the reset button.\n * Re-enable and set focus on the draw button.\n * Re-initialize the game.\n *****************************************************************************/\nBINGO.resetGame = () => {\n  \n    const _tds  = document.getElementsByClassName( 'drawn' );\n\n    // reset global vars\n    BINGO.ballsArr = [];\n    BINGO.domElems.drawnLast.innerHTML = 'Click to Draw';\n    BINGO.domElems.drawHistory.innerHTML = '';\n\n    // reset all the CSS styles for the drawn balls\n    for ( let i = _tds.length - 1; i >= 0; i-- ) {\n\n        _tds[ i ].classList.remove( 'drawn', 'last' );\n\n    }\n\n    // hide the rest button\n    BINGO.domElems.resetButton.classList.add( 'display-none' );\n\n    // re-enable draw button\n    BINGO.domElems.drawButton.disabled = false;\n    BINGO.domElems.drawButton.classList.remove( 'disabled' );\n\n    // set focus on the draw button\n    BINGO.domElems.drawButton.focus();\n\n    // re-initialize\n    BINGO.init();\n\n}\n\n/******************************************************************************\n * POPULATE CARD\n * Clears and populates the playing card with random numbers.\n *****************************************************************************/\nBINGO.populateCard = () => {\n\n    let _cardNumsArr = [];\n\n    for ( let i = BINGO.cardCells.length - 1; i >= 0; i-- ) {\n\n        let _randomNumber = BINGO.generateRandomNumber( BINGO.cardCells[ i ].dataset.max,\n                                                        BINGO.cardCells[ i ].dataset.min,\n                                                        _cardNumsArr );\n\n        BINGO.cardCells[ i ].classList.remove( 'marked' );\n        BINGO.cardCells[ i ].innerHTML = _randomNumber;\n        BINGO.cardCells[ i ].id = 'js-card-' + _randomNumber;\n\n    }\n\n    BINGO.cardCells[ 0 ].className = 'js-card-cell B1';\n    BINGO.cardCells[ 1 ].className = 'js-card-cell I1';\n    BINGO.cardCells[ 2 ].className = 'js-card-cell N1';\n    BINGO.cardCells[ 3 ].className = 'js-card-cell G1';\n    BINGO.cardCells[ 4 ].className = 'js-card-cell O1';\n\n    BINGO.cardCells[ 5 ].className = 'js-card-cell B2';\n    BINGO.cardCells[ 6 ].className = 'js-card-cell I2';\n    BINGO.cardCells[ 7 ].className = 'js-card-cell N2';\n    BINGO.cardCells[ 8 ].className = 'js-card-cell G2';\n    BINGO.cardCells[ 9 ].className = 'js-card-cell O2';\n\n    BINGO.cardCells[ 10 ].className = 'js-card-cell B3';\n    BINGO.cardCells[ 11 ].className = 'js-card-cell I3';\n    BINGO.cardCells[ 12 ].innerHTML = 'FREE';\n    BINGO.cardCells[ 12 ].className = 'js-card-cell N3 marked';\n    BINGO.cardCells[ 12 ].removeAttribute(\"id\");\n    BINGO.cardCells[ 13 ].className = 'js-card-cell G3';\n    BINGO.cardCells[ 14 ].className = 'js-card-cell O3';\n\n    BINGO.cardCells[ 15 ].className = 'js-card-cell B4';\n    BINGO.cardCells[ 16 ].className = 'js-card-cell I4';\n    BINGO.cardCells[ 17 ].className = 'js-card-cell N4';\n    BINGO.cardCells[ 18 ].className = 'js-card-cell G4';\n    BINGO.cardCells[ 19 ].className = 'js-card-cell O4';\n\n    BINGO.cardCells[ 20 ].className = 'js-card-cell B5';\n    BINGO.cardCells[ 21 ].className = 'js-card-cell I5';\n    BINGO.cardCells[ 22 ].className = 'js-card-cell N5';\n    BINGO.cardCells[ 23 ].className = 'js-card-cell G5';\n    BINGO.cardCells[ 24 ].className = 'js-card-cell O5';\n\n};\n\nBINGO.isFourCorners = function( radio ) {\n\n    let _value = radio.value;\n\n    console.log( _value );\n\n};\n\n/******************************************************************************\n * DRAW BALL\n * Do all the things:\n *     - draw a random ball\n *     - pop it from ballsArr[]\n *     - update the DOM (text and highlighting)\n *     - decrement the ball count\n *     - disable draw button\n *     - show reset button\n *****************************************************************************/\nBINGO.drawBall = () => {\n\n    const _ball = BINGO.randomBallSelector();\n    const _drawnNumber = parseInt( _ball.split( '-' )[ 1 ] );\n\n    if( BINGO.ballCount > 0 ) {\n\n        BINGO.popBall( _ball )\n             .updateDrawHistory( _ball )\n             .updateLastDrawn( _ball )\n             .highlightDrawnBall( _ball )\n             .highlightCardCell( _drawnNumber );\n\n        BINGO.ballCount--;\n\n        if( BINGO.ballCount === 0 ) {\n\n            // disable draw button\n            BINGO.domElems.drawButton.disabled = true;\n            BINGO.domElems.drawButton.classList.add( 'disabled' );\n            // show the reset button\n            BINGO.domElems.resetButton.classList.remove( 'display-none' );\n\n        }\n\n    }\n\n};\n\n// BINGO.domElems.drawButton.addEventListener( 'click', BINGO.drawBall );\n// BINGO.domElems.resetButton.addEventListener( 'click', BINGO.resetGame );\nBINGO.domElems.cardButton.addEventListener( 'click', BINGO.populateCard );"]},"metadata":{},"sourceType":"module"}